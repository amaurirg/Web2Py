(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> accepts() takes at least 2 arguments (1 given)"
p3
sS'layer'
p4
S'/home/amauri/web2py/applications/plano_de_acao/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    # grid = SQLFORM.grid(PLANO)\n    # return dict(grid=grid)\n    planos = db(PLANO).select(orderby=db.plano.prazo)\n    concluidos = db(PLANO.concluido == \'SIM\').select(orderby=db.plano.prazo)\n    # print planos\n    # print datetime.date.today()\n    # return dict(planos=planos, concluidos=concluidos)\n\n\n# def novo_plano():\n    form = SQLFORM(PLANO, submit_button=\'Salvar\')\n    if form.accepts().accepted:\n        response.flash = "Salvo com sucesso!"\n        redirect(URL(\'index\'))\n    elif form.errors:\n        response.flash = \'Erros no preenchimento ou campo vazio!\'\n    # else:\n    #     response.flash = \'Preencha os campos para salvar ou alterar um plano de a\xc3\xa7\xc3\xa3o!\'\n    # form.add_button(\'Cancelar\', URL(\'index\'), _class=\'btn btn-primary\')\n    button = A(\'Cancelar\', _href=\'index\', _class="btn btn-primary")\n    # return dict(form=form)\n    return dict(planos=planos, concluidos=concluidos, form=form, button=button)\n\ndef editar_plano():\n    plano = db(PLANO.id == request.args(0, cast=int)).select().first()\n    form = SQLFORM(PLANO, plano)\n    if form.process().accepted:\n        response.flash = \'Registro alterado com sucesso!\'\n    elif form.errors:\n        response.flash = \'Erros no formul\xc3\xa1rio!\'\n    # else:\n    #     response.flash = \'Nenhuma altera\xc3\xa7\xc3\xa3o foi realizada!\'\n    form.add_button(\'Cancelar\', URL(\'index\'), _class=\'btn btn-primary\')\n    return dict(form=form, plano=plano)\n\n\ndef teste():\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/amauri/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/amauri/web2py/applications/plano_de_acao/controllers/default.py", line 91, in <module>\n  File "/home/amauri/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/amauri/web2py/applications/plano_de_acao/controllers/default.py", line 24, in index\n    if form.accepts().accepted:\nTypeError: accepts() takes at least 2 arguments (1 given)\n'
p11
s.