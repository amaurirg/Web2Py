(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'count'"
p3
sS'layer'
p4
S'/home/amauri/web2py/applications/plano_de_acao/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n# @auth.requires_login()\ndef index():\n    return dict()\n\n# @auth.requires_login()\ndef planos_de_acao():\n    # valida = \'\'\n    # grid = SQLFORM.grid(PLANO)\n    # return dict(grid=grid)\n    # print db.plano.fields\n    # filtro = SQLFORM.factory(\n    #     Field( \'filtro\', requires=IS_EMPTY_OR(IS_IN_DB(db, \'nome_ramal.id\',\'%(nome)s - %(ramal)s\',zero=\'RAMAL\'))))\n    planos = db(PLANO.concluido == \'N\xc3\x83O\').select(orderby=db.plano.prazo)\n    concluidos = db(PLANO.concluido == \'SIM\').select(orderby=db.plano.prazo)\n    # print planos\n    # print datetime.date.today()\n    # return dict(planos=planos, concluidos=concluidos)\n\n\n# def novo_plano():\n    form = SQLFORM(PLANO, _id=\'form_novo_plano\', submit_button=\'Salvar\')\n    if form.process().accepted:\n        response.flash = "Salvo com sucesso!"\n        redirect(URL(\'planos_de_acao\'))\n    elif form.errors:\n        response.flash = \'Erros no preenchimento ou campo vazio!\'\n        # valida = \'erro\'\n    # else:\n    #     response.flash = \'Preencha os campos para salvar ou alterar um plano de a\xc3\xa7\xc3\xa3o!\'\n    # form.add_button(\'Cancelar\', URL(\'index\'), _class=\'btn btn-primary\')\n    button = A(\'Cancelar\', _href=\'../planos_de_acao\', _class="btn btn-primary", _style="border-radius: 5px;")\n    # return dict(form=form)\n    return dict(planos=planos, concluidos=concluidos, form=form, button=button)#, valida=valida)\n\n\n# @auth.requires_login()\ndef editar_plano():\n    plano = db(PLANO.id == request.args(0, cast=int)).select().first()\n    form = SQLFORM(PLANO, plano, submit_button=\'Salvar\')\n    if form.process().accepted:\n        response.flash = \'Registro alterado com sucesso!\'\n        redirect(URL(\'planos_de_acao\'))\n    elif form.errors:\n        response.flash = \'Erros no preenchimento ou campo vazio!\'\n    # else:\n    #     response.flash = \'Nenhuma altera\xc3\xa7\xc3\xa3o foi realizada!\'\n    button = A(\'Cancelar\', _href=\'../planos_de_acao\', _class="btn btn-primary", _style="margin-left:20px;border-radius: 5px;")\n    return dict(form=form, plano=plano, button=button)\n\n\n# @auth.requires_login()\ndef ver_concluido():\n    plano = db(PLANO.id == request.args(0, cast=int)).select().first()\n    form = SQLFORM(PLANO, plano, submit_button=\'Salvar\')\n    if form.process().accepted:\n        response.flash = \'Registro alterado com sucesso!\'\n        redirect(URL(\'planos_de_acao\'))\n    elif form.errors:\n        response.flash = \'Erros no formul\xc3\xa1rio!\'\n    # else:\n    #     response.flash = \'Nenhuma altera\xc3\xa7\xc3\xa3o foi realizada!\'\n    button = A(\'Voltar\', _href=\'../planos_de_acao\', _class="btn btn-primary", _style="margin-left:20px;border-radius: 5px;")\n    return dict(form=form, plano=plano, button=button)\n\n\n# @auth.requires_login()\ndef atendimentos():\n    atendimentos = db(ATEND).select(orderby=db.atendimentos.created_on)\n    em_atendimento = db(db.status_atend.status!=\'CONCLU\xc3\x8dDO\').select(join=db.atendimentos.on(\n        db.status_atend.id == db.atendimentos.status), orderby=db.atendimentos.created_on)\n    atend_conc = db(db.status_atend.status==\'CONCLU\xc3\x8dDO\').select(join=db.atendimentos.on(\n        db.status_atend.id == db.atendimentos.status), orderby=db.atendimentos.created_on)\n    # print em_atendimento\n    # banco(banco.carros.id>0).count()\n    \n    # cont_em_atendimento = db(db.status_atend.status==\'EM ATENDIMENTO\').select(join=db.atendimentos.on(\n    #     db.status_atend.id == db.atendimentos.status))\n    # cont_aguardando = db(db.status_atend.status==\'AGUARDANDO\').select(db.atendimentos.status,join=db.atendimentos.on(\n    #     db.status_atend.id == db.atendimentos.status))\n    # cont_entrar_em_contato = db(db.status_atend.status==\'ENTRAR EM CONTATO\').select(join=db.atendimentos.on(\n    #     db.status_atend.id == db.atendimentos.status))\n    # cont_concluido = db(db.status_atend.status==\'CONCLU\xc3\x8dDO\').select(join=db.atendimentos.on(\n    #     db.status_atend.id == db.atendimentos.status))\n\n    # for row in cont_aguardando:\n    #     print row.status_atend.status\n    # cont_aguardando = db(ATEND.status==\'3\').count()\n    # print cont_aguardando\n\n    dados = db(ATEND).select(ATEND.created_on, ATEND.cliente, ATEND.contato, ATEND.status).count()\n    return dados\n# groupby=(db.camisetas.tipo, db.camisetas.tamanho)\n\n\n    return dict(atendimentos=atendimentos, atend_conc=atend_conc, em_atendimento=em_atendimento)\n                # cont_em_atendimento=cont_em_atendimento, cont_aguardando=cont_aguardando, \n                # cont_entrar_em_contato=cont_entrar_em_contato, cont_concluido=cont_concluido)\n\n"""\n                      <li class="li-info" role="presentation" class="cor">Em atendimento <span class="badge cor-badge">\n                      {{ =cont_em_atendimento.status_atend.status }}</span></li>\n                      <li class="li-info" role="presentation" class="cor">Aguardando <span class="badge cor-badge">\n                      {{ =cont_aguardando.status_atend.status }}</span></li>\n                      <li class="li-info" role="presentation" class="cor">Entrar em contato <span class="badge cor-badge">\n                      {{ =cont_entrar_em_contato.status_atend.status }}</span></li>\n"""\n\ndef atendimentos_ui():\n    planos = db(PLANO).select(orderby=db.plano.prazo)\n    return dict(planos=planos)\n\n\ndef layoutit():\n    return dict()\n\ndef tabela():\n    return dict()\n\n\n"""\n\n>>> db.define_table(\'person\',\n                    Field(\'name\'),\n                    format=\'%(name)s\')\n\n>>> db.define_table(\'thing\',\n                    Field(\'name\'),\n                    Field(\'owner_id\', \'reference person\'),\n                    format=\'%(name)s\')\n\nrows = db(db.person).select(join=db.thing.on(db.person.id == db.thing.owner_id))                    \n"""\n\n\n\ndef test():\n    # row = db(db.status_atend.id == db.atendimentos.status).select()\n    rows = db(db.status_atend.status==\'CONCLU\xc3\x8dDO\').select(join=db.atendimentos.on(\n        db.status_atend.id == db.atendimentos.status), orderby=db.atendimentos.created_on)\n    for row in rows:\n        # print row.cliente\n        print row.status_atend.status\n    return dict(rows=rows)\n\n# @auth.requires_login()\ndef export_xls():\n    import openpyxl, os     #\'\'\'importa openpyxl\'\'\'\n    from openpyxl import load_workbook\n    #\'\'\'importa fun\xc3\xa7\xc3\xb5es para converter letras e n\xc3\xbameros\'\'\'\n    # from openpyxl.cell import get_column_letter, column_index_from_string\n    \n\n    wb = load_workbook(\'./applications/plano_de_acao/static/files/PlanoAmauri.xlsx\')\n    sheet = wb.get_sheet_by_name(\'Plano\')       #obt\xc3\xa9m a planilha Plan1\n    sheet = wb[\'Plano\']\n    # anotherSheet = wb.active\n    conteudo = sheet[\'A9\']\n\n    print sheet[\'B9\'].value\n\n    print \'Nome das planilhas: \', wb.get_sheet_names()\n\n    print \'Valor: \', conteudo.value\n    print \'Tamanho m\xc3\xa1ximo de linhas da planilha: \', str(sheet.max_row)\n    print \'Tamanho m\xc3\xa1ximo de colunas da planilha: \', str(sheet.max_column)\n\n    # print os.listdir(\'./applications/plano_de_acao/static/files\')\n\n    return "Leu arquivo xls"\n\n\n\ndef teste():\n    return dict()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(atendimentos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/amauri/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/amauri/web2py/applications/plano_de_acao/controllers/default.py", line 226, in <module>\n  File "/home/amauri/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/amauri/web2py/applications/plano_de_acao/controllers/default.py", line 100, in atendimentos\n    dados = db(ATEND).select(ATEND.created_on, ATEND.cliente, ATEND.contato, ATEND.status).count()\nAttributeError: \'Rows\' object has no attribute \'count\'\n'
p11
s.