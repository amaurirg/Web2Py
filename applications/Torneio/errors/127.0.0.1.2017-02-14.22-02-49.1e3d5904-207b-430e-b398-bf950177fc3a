(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'Rows'"
p3
sS'layer'
p4
S'/home/amauri/web2py/applications/Torneio/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\nimport random\n\n"""\nlista = [\'A\', \'B\', \'C\', \'D\']\n\nlista_jogos = []\n\nfor i,item in enumerate(lista):\n    for item in lista:\n        if lista.index(item) == i:\n            continue\n        else:\n            jogo = sorted([lista[i], item])\n            if not jogo in lista_jogos:\n                lista_jogos.append(jogo)\nprint(lista_jogos)\n\nrandom.shuffle(lista_jogos)\nprint(lista_jogos)\n"""\n\ndef jogos():\n    grid = SQLFORM.grid(CLUBES)\n    times = db(CLUBES).select(CLUBES.clube)\n    # print times\n    lista = []\n    for item in times:\n        lista.append(item.clube)\n        # print item.clube\n    # lista = [x for x in times]\n    # print lista\n    lista_jogos = []\n\n    for i,item in enumerate(lista):\n        for item in lista:\n            if lista.index(item) == i:\n                continue\n            else:\n                jogo = sorted([lista[i], item])\n                if not jogo in lista_jogos:\n                    lista_jogos.append(jogo)\n    # print(lista_jogos)\n\n    # random.shuffle(lista_jogos)\n    # print(lista_jogos)\n\n    # return dict()\n    return dict(grid=grid, lista_jogos=lista_jogos, times=times)\n\n\ndef index():\n    dados = int(db(CLUBES.clube=="Palmeiras").select(CLUBES.pontos))\n    atual = dados + 3\n    print atual\n\n\ndef teste_classe():\n\n    class Equipes:\n        # docstring for Equipes\n        pontos = 0\n        gols = 0\n        def __init__(self, nome, equipe):\n            self.nome = nome\n            self.equipe = equipe\n\n\n\n    thiago = Equipes("Thiago", "Fran\xc3\xa7a")\n    bruno = Equipes("Bruno", "Portugal")\n    fernanda = Equipes("Fernanda", "Brasil")\n    amauri = Equipes("Amauri", "Alemanha")\n\n    print thiago.equipe\n\n    nomes = [thiago, fernanda, bruno, amauri]\n\n    # print nomes\n    \n    equipes = [clube.equipe for clube in nomes]\n\n    print equipes\n    # nomes = [thiago.equipe, fernanda.equipe, bruno.equipe, amauri.equipe]\n\n    # print(jogo1.gols_marcados)\n\n    # for time in nomes:\n    #     print time.nome, time.equipe, time.pontos, time.gols\n\n    lista_jogos = []\n\n\n    for i,item in enumerate(equipes):\n        for item in equipes:\n            if equipes.index(item) == i:\n                continue\n            else:\n                jogo = sorted([equipes[i], item])\n                if not jogo in lista_jogos:\n                    lista_jogos.append(jogo)\n\n    print "lista_jogos", lista_jogos\n\n    # jogos = {\'jogo1\':{thiago.equipe:thiago.gols, amauri.equipe:amauri.gols}}\n\n    # print jogos[\'jogo1\']\n\n\n    # thiago.gols = 6\n    # amauri.gols = 4\n\n    # jogos = {\'jogo1\':{thiago.equipe:thiago.gols, amauri.equipe:amauri.gols}}\n\n    # if thiago.gols > amauri.gols:\n    #     thiago.pontos += 3\n    # elif thiago.gols < amauri.gols:\n    #     amauri.pontos += 3\n    # else: \n    #     amauri.pontos += 1\n    #     thiago.pontos += 1\n\n\n    # print \'Equipe\',jogos[\'jogo1\'][thiago.equipe]\n\n    # print jogos[\'jogo1\']\n\n    # print jogos\n\n    # for time in nomes:\n    #     print time.nome, time.equipe, time.pontos, time.gols\n\n\n    return dict(lista_jogos=lista_jogos)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/amauri/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/amauri/web2py/applications/Torneio/controllers/default.py", line 184, in <module>\n  File "/home/amauri/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/amauri/web2py/applications/Torneio/controllers/default.py", line 62, in index\n    dados = int(db(CLUBES.clube=="Palmeiras").select(CLUBES.pontos))\nTypeError: int() argument must be a string or a number, not \'Rows\'\n'
p11
s.